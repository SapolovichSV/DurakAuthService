// Code generated by mockery 2.52.2. DO NOT EDIT.

package login

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	user "github.com/SapolovichSV/durak/auth/internal/entities/user"
)

// Mockcookier is an autogenerated mock type for the cookier type
type Mockcookier struct {
	mock.Mock
}

type Mockcookier_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockcookier) EXPECT() *Mockcookier_Expecter {
	return &Mockcookier_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, w
func (_m *Mockcookier) Login(_a0 user.User, w http.ResponseWriter) error {
	ret := _m.Called(_a0, w)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(user.User, http.ResponseWriter) error); ok {
		r0 = rf(_a0, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockcookier_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Mockcookier_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 user.User
//   - w http.ResponseWriter
func (_e *Mockcookier_Expecter) Login(_a0 interface{}, w interface{}) *Mockcookier_Login_Call {
	return &Mockcookier_Login_Call{Call: _e.mock.On("Login", _a0, w)}
}

func (_c *Mockcookier_Login_Call) Run(run func(_a0 user.User, w http.ResponseWriter)) *Mockcookier_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *Mockcookier_Login_Call) Return(_a0 error) *Mockcookier_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockcookier_Login_Call) RunAndReturn(run func(user.User, http.ResponseWriter) error) *Mockcookier_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcookier creates a new instance of Mockcookier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcookier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockcookier {
	mock := &Mockcookier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
