// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	user "github.com/SapolovichSV/durak/auth/internal/entities/user"
	mock "github.com/stretchr/testify/mock"
)

// storage is an autogenerated mock type for the storage type
type storage struct {
	mock.Mock
}

// UserByEmailAndPassword provides a mock function with given fields: email, password
func (_m *storage) UserByEmailAndPassword(email string, password string) (user.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmailAndPassword")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newStorage creates a new instance of storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *storage {
	mock := &storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
