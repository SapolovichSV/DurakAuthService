// Code generated by mockery 2.52.3. DO NOT EDIT.

package login

import (
	user "github.com/SapolovichSV/durak/auth/internal/entities/user"
	mock "github.com/stretchr/testify/mock"
)

// Mockstorage is an autogenerated mock type for the storage type
type Mockstorage struct {
	mock.Mock
}

type Mockstorage_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockstorage) EXPECT() *Mockstorage_Expecter {
	return &Mockstorage_Expecter{mock: &_m.Mock}
}

// UserByEmailAndPassword provides a mock function with given fields: email, password
func (_m *Mockstorage) UserByEmailAndPassword(email string, password string) (user.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmailAndPassword")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockstorage_UserByEmailAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmailAndPassword'
type Mockstorage_UserByEmailAndPassword_Call struct {
	*mock.Call
}

// UserByEmailAndPassword is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *Mockstorage_Expecter) UserByEmailAndPassword(email interface{}, password interface{}) *Mockstorage_UserByEmailAndPassword_Call {
	return &Mockstorage_UserByEmailAndPassword_Call{Call: _e.mock.On("UserByEmailAndPassword", email, password)}
}

func (_c *Mockstorage_UserByEmailAndPassword_Call) Run(run func(email string, password string)) *Mockstorage_UserByEmailAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Mockstorage_UserByEmailAndPassword_Call) Return(_a0 user.User, _a1 error) *Mockstorage_UserByEmailAndPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockstorage_UserByEmailAndPassword_Call) RunAndReturn(run func(string, string) (user.User, error)) *Mockstorage_UserByEmailAndPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockstorage creates a new instance of Mockstorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockstorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockstorage {
	mock := &Mockstorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
